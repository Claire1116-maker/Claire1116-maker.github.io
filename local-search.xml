<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/02/23/urllib/"/>
    <url>/2025/02/23/urllib/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CGI编程</title>
    <link href="/2025/02/20/CGI%E7%BC%96%E7%A8%8B/"/>
    <url>/2025/02/20/CGI%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h1><p>CGI(Common Gateway Interface),通用网关接口,它是一段程序,运行在服务器上如：HTTP服务器，提供同客户端HTML页面的接口。</p><p>CGI程序可以是Python脚本，PERL脚本，SHELL脚本，C或者C++程序等</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/02/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/02/07/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/images/R.png" alt="图片引用方法"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/07/hello-world/"/>
    <url>/2025/02/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2025/02/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2025/02/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="re-match函数和search函数"><a href="#re-match函数和search函数" class="headerlink" title="# re.match函数和search函数"></a># re.match函数和search函数</h1><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">re.<span class="hljs-keyword">match</span>(pattern,string,flags=<span class="hljs-number">0</span>)<br>re.search(pattern, string, flags=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>panttern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>匹配的字符串</td></tr><tr><td>flags</td><td>控制正则表达式的匹配方式</td></tr></tbody></table><p>匹配成功返回一个匹配对象，否则返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;www&#x27;</span>, <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>).span()<br><span class="hljs-comment">#从字符串开头开始匹配，span()方法返回匹配的起始和结束位置</span><br><span class="hljs-comment">#输出：（0，3）</span><br>re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;com&#x27;</span>, <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>)<br><span class="hljs-comment">#匹配失败输出None</span><br><br><br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-built_in">print</span>(re.search(<span class="hljs-string">&#x27;www&#x27;</span>, <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="hljs-comment"># 在任意位置匹配</span><br><span class="hljs-built_in">print</span>(re.search(<span class="hljs-string">&#x27;com&#x27;</span>, <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>).span())  <span class="hljs-comment"># 在任意位置匹配</span><br><span class="hljs-comment">#输出</span><br>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br>(<span class="hljs-number">11</span>, <span class="hljs-number">14</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#(.*)：贪婪匹配，捕获 &quot;are&quot; 前面的所有内容。</span><br><br><span class="hljs-comment">#are：匹配固定的 &quot;are&quot;。</span><br><br><span class="hljs-comment">#(.*?)：非贪婪匹配，捕获 &quot;are&quot; 后面的内容，直到遇到空格。</span><br><br><span class="hljs-comment">#.*：贪婪匹配，捕获剩余的所有内容。</span><br><span class="hljs-keyword">import</span> re<br><br>line = <span class="hljs-string">&quot;Cats are smarter than dogs&quot;</span><br>matchObj = re.<span class="hljs-keyword">match</span>( <span class="hljs-string">r&#x27;(.*) are (.*?) (.*)&#x27;</span>, line, re.M|re.I)<br><br><span class="hljs-keyword">if</span> matchObj:<br><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;matchObj.group() : &quot;</span>, matchObj.group())<br><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;matchObj.group(1) : &quot;</span>, matchObj.group(<span class="hljs-number">1</span>))<br><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;matchObj.group(2) : &quot;</span>, matchObj.group(<span class="hljs-number">2</span>))<br><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;matchObj.group(3) : &quot;</span>, matchObj.group(<span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">else</span>:<br><br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;No match!!&quot;</span>)<br><span class="hljs-comment">#答案</span><br>matchObj.group() :  Cats are smarter than dogs<br>matchObj.group(<span class="hljs-number">1</span>) :  Cats<br>matchObj.group(<span class="hljs-number">2</span>) :  smarter<br>matchObj.group(<span class="hljs-number">3</span>) :  than dogss<br><br><br><span class="hljs-keyword">import</span> re<br><br>line = <span class="hljs-string">&quot;Cats are smarter than dogs&quot;</span><br><br>matchObj = re.<span class="hljs-keyword">match</span>( <span class="hljs-string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)<br><span class="hljs-keyword">if</span> matchObj:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;match --&gt; matchObj.group() : &quot;</span>, matchObj.group())<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;No match!!&quot;</span>)<br><br>matchObj = re.search( <span class="hljs-string">r&#x27;dogs&#x27;</span>, line, re.M|re.I)<br><span class="hljs-keyword">if</span> matchObj:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;search --&gt; matchObj.group() : &quot;</span>, matchObj.group())<br><span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;No match!!&quot;</span>)<br><span class="hljs-comment">#答案</span><br>No <span class="hljs-keyword">match</span>!!<br>search --&gt; matchObj.group() :  dogs<br></code></pre></td></tr></table></figure><h1 id="检索和替换"><a href="#检索和替换" class="headerlink" title="检索和替换"></a>检索和替换</h1><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.sub(pattern, repl, string, count=<span class="hljs-number">0</span>, flags=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>pattern</td><td>正则中的模式字符串</td></tr><tr><td>repl</td><td>替换的字符串</td></tr><tr><td>string</td><td>要被查找替换的原字符串</td></tr><tr><td>count</td><td>模式匹配后最大的替换次数，默认0表示替换所有的匹配</td></tr><tr><td>flags</td><td>编译时用的匹配模式</td></tr></tbody></table><p>前三个为必选参数，后两个为可选参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>phone = <span class="hljs-string">&quot;2004-959-559 # 这是一个电话号码&quot;</span><br> <span class="hljs-comment">#&#x27;#&#x27;：匹配字符 #。</span><br> <span class="hljs-comment">#&#x27;.*&#x27;：匹配任意字符（除换行符外）零次或多次。</span><br> <span class="hljs-comment">#&#x27;$&#x27;：匹配字符串的结尾。</span><br> <span class="hljs-comment">#这个正则表达式的作用是匹配从&#x27;#&#x27;开始到字符串结尾的所有内容。删除注释</span><br>num = re.sub(<span class="hljs-string">r&#x27;#.*$&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>, phone)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;电话号码 : &quot;</span>, num)<br><br><span class="hljs-comment"># 移除非数字的内容</span><br><span class="hljs-comment">#&#x27;\D&#x27;表示匹配任何非数字字符</span><br>num = re.sub(<span class="hljs-string">r&#x27;\D&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>, phone)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;电话号码 : &quot;</span>, num)<br></code></pre></td></tr></table></figure><p>以上结果：</p><p>电话号码 :  2004-959-559<br>电话号码 :  2004959559</p><h2 id="当repl是一个函数"><a href="#当repl是一个函数" class="headerlink" title="当repl是一个函数"></a>当repl是一个函数</h2><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 将匹配的数字乘以 2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">matched</span>):<br>    value = <span class="hljs-built_in">int</span>(matched.group(<span class="hljs-string">&#x27;value&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(value * <span class="hljs-number">2</span>)<br><span class="hljs-comment">#如果你在正则表达式中使用了 命名捕获组（如 (?P&lt;name&gt;...)），</span><br><span class="hljs-comment">#可以通过 matched.group(&#x27;name&#x27;) 获取对应的匹配结果。</span><br>s = <span class="hljs-string">&#x27;A23G4HFD567&#x27;</span><br><span class="hljs-built_in">print</span>(re.sub(<span class="hljs-string">&#x27;(?P&lt;value&gt;\d+)&#x27;</span>, double, s))<br></code></pre></td></tr></table></figure><h1 id="complie函数"><a href="#complie函数" class="headerlink" title="complie函数"></a>complie函数</h1><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.<span class="hljs-built_in">compile</span>(pattern[,flags])<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>pattern</td><td>一个字符串的正则表达式</td><td></td></tr><tr><td>flags</td><td>（可选）匹配模式</td><td>(re.I)忽略大小写，(re.M)它们匹配字符串的每一行的开头和结尾，(re.L)表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境，（re.S)使 . 匹配包括换行符在内的任意字符，（re.ASCII）使 \w, \W, \b, \B, \d, \D, \s, \S 仅匹配 ASCII 字符，（re.X）忽略空格和注释</td></tr></tbody></table><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">import</span> re<br><span class="hljs-meta">&gt;&gt;&gt; </span>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>)<span class="hljs-comment"># 用于匹配至少一个数字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = pattern.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;one12twothree34four&#x27;</span>)<span class="hljs-comment"># 查找头部，没有匹配</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>( m )<br><span class="hljs-literal">None</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = pattern.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;one12twothree34four&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>) <span class="hljs-comment"># 从&#x27;e&#x27;的位置开始匹配，没有匹配</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>( m )<br><span class="hljs-literal">None</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = pattern.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;one12twothree34four&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>) <span class="hljs-comment"># 从&#x27;1&#x27;的位置开始匹配，正好匹配</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>( m )  <span class="hljs-comment">#返回一个 Match 对象                                    </span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 可省略 0</span><br><span class="hljs-string">&#x27;12&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.start(<span class="hljs-number">0</span>)   <span class="hljs-comment"># 可省略 0</span><br><span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.end(<span class="hljs-number">0</span>)     <span class="hljs-comment"># 可省略 0</span><br><span class="hljs-number">5</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.span(<span class="hljs-number">0</span>)    <span class="hljs-comment"># 可省略 0</span><br>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">import</span> re<br><span class="hljs-meta">&gt;&gt;&gt; </span>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;([a-z]+) ([a-z]+)&#x27;</span>, re.I)   <span class="hljs-comment"># re.I 表示忽略大小写</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = pattern.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;Hello World Wide Web&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>( m )                            <span class="hljs-comment"># 匹配成功，返回一个 Match 对象</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">0</span>)                            <span class="hljs-comment"># 返回匹配成功的整个子串</span><br><span class="hljs-string">&#x27;Hello World&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.span(<span class="hljs-number">0</span>)                             <span class="hljs-comment"># 返回匹配成功的整个子串的索引</span><br>(<span class="hljs-number">0</span>, <span class="hljs-number">11</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">1</span>)                            <span class="hljs-comment"># 返回第一个分组匹配成功的子串</span><br><span class="hljs-string">&#x27;Hello&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.span(<span class="hljs-number">1</span>)                             <span class="hljs-comment"># 返回第一个分组匹配成功的子串的索引</span><br>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">2</span>)                            <span class="hljs-comment"># 返回第二个分组匹配成功的子串</span><br><span class="hljs-string">&#x27;World&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m.span(<span class="hljs-number">2</span>)                             <span class="hljs-comment"># 返回第二个分组匹配成功的子串索引</span><br>(<span class="hljs-number">6</span>, <span class="hljs-number">11</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.groups()                            <span class="hljs-comment"># 等价于 (m.group(1), m.group(2), ...)</span><br>(<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;World&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.group(<span class="hljs-number">3</span>)                            <span class="hljs-comment"># 不存在第三个分组</span><br></code></pre></td></tr></table></figure><h1 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h1><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">re.findall(pattern, string, flags=<span class="hljs-number">0</span>)或<br>pattern.findall(string[, pos[, endpos]])<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>pattern</td><td>匹配模式</td></tr><tr><td>string</td><td>带匹配字符串</td></tr><tr><td>pos</td><td>指定字符串的起始位置</td></tr><tr><td>endpos</td><td>指定字符串的结束位置</td></tr></tbody></table><p>查找字符串中的所有数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>result1 = re.findall(<span class="hljs-string">r&#x27;\d+&#x27;</span>,<span class="hljs-string">&#x27;runoob 123 google 456&#x27;</span>)<br><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\d+&#x27;</span>)   <span class="hljs-comment"># 查找数字</span><br>result2 = pattern.findall(<span class="hljs-string">&#x27;runoob 123 google 456&#x27;</span>)<br>result3 = pattern.findall(<span class="hljs-string">&#x27;run88oob123google456&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>)<br><br><span class="hljs-built_in">print</span>(result1)<br><span class="hljs-built_in">print</span>(result2)<br><span class="hljs-built_in">print</span>(result3)<br><br><br><span class="hljs-comment">#结果</span><br>[<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;456&#x27;</span>]<br>[<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;456&#x27;</span>]<br>[<span class="hljs-string">&#x27;88&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>]<br></code></pre></td></tr></table></figure><p>返回元组列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>result = re.findall(<span class="hljs-string">r&#x27;(\w+)=(\d+)&#x27;</span>, <span class="hljs-string">&#x27;set width=20 and height=10&#x27;</span>)<br><span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment">#结果</span><br>[(<span class="hljs-string">&#x27;width&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>), (<span class="hljs-string">&#x27;height&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>)]<br></code></pre></td></tr></table></figure><h1 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer"></a>re.finditer</h1><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.finditer(pattern, string, flags=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>it = re.finditer(<span class="hljs-string">r&quot;\d+&quot;</span>,<span class="hljs-string">&quot;12a32bc43jf3&quot;</span>) <br><span class="hljs-keyword">for</span> <span class="hljs-keyword">match</span> <span class="hljs-keyword">in</span> it: <br>    <span class="hljs-built_in">print</span> (<span class="hljs-keyword">match</span>.group() )<br>结果<br><span class="hljs-number">12</span> <br><span class="hljs-number">32</span> <br><span class="hljs-number">43</span> <br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h1 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h1><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.split(pattern, string[, maxsplit=<span class="hljs-number">0</span>, flags=<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>maxplit</td><td>分割次数，默认0不限制次数</td></tr></tbody></table><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#正则表达式 \W+：</span><br><span class="hljs-comment">#\W 匹配任何非单词字符（等价于 [^a-zA-Z0-9_]）。</span><br><span class="hljs-comment">#\W+ 匹配一个或多个非单词字符。</span><br>&gt;&gt;&gt;<span class="hljs-keyword">import</span> re<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;\W+&#x27;</span>, <span class="hljs-string">&#x27;runoob, runoob, runoob.&#x27;</span>)<br>[<span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><span class="hljs-comment">#&#x27;&#x27;：字符串开头的空格被匹配为分隔符。</span><br><span class="hljs-comment">#&#x27; &#x27;：第一个单词前的空格。</span><br><span class="hljs-comment">#&#x27;runoob&#x27;：第一个单词。</span><br><span class="hljs-comment">#&#x27;, &#x27;：第一个和第二个单词之间的分隔符。</span><br><span class="hljs-comment">#&#x27;runoob&#x27;：第二个单词。</span><br><span class="hljs-comment">#&#x27;, &#x27;：第二个和第三个单词之间的分隔符。</span><br><span class="hljs-comment">#&#x27;runoob&#x27;：第三个单词。</span><br><span class="hljs-comment">#&#x27;.&#x27;：末尾的分隔符。</span><br><span class="hljs-comment">#&#x27;&#x27;：末尾的空字符串。</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;(\W+)&#x27;</span>, <span class="hljs-string">&#x27; runoob, runoob, runoob.&#x27;</span>) <br>[<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;, &#x27;</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;, &#x27;</span>, <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;\W+&#x27;</span>, <span class="hljs-string">&#x27; runoob, runoob, runoob.&#x27;</span>, <span class="hljs-number">1</span>) <br>[<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;runoob, runoob, runoob.&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>re.split(<span class="hljs-string">&#x27;a*&#x27;</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>)   <span class="hljs-comment"># 对于一个找不到匹配的字符串而言，split 不会对其作出分割</span><br>[<span class="hljs-string">&#x27;hello world&#x27;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2025/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2025/02/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>list.append(x)</td><td>把一个元素添加到列表的结尾，相当于 a[len(a):] &#x3D; [x]</td></tr><tr><td>list.extend(L)</td><td>通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] &#x3D; L。</td></tr><tr><td>list.insert(i, x)</td><td>a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td></tr><tr><td>list.remove(x)</td><td>删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。</td></tr><tr><td>list.pop([i])</td><td>从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。</td></tr><tr><td>list.clear()</td><td>移除列表中的所有项。</td></tr><tr><td>list.index(x)</td><td>返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。</td></tr><tr><td>list.count(x)</td><td>返回 x 在列表中出现的次数。</td></tr><tr><td>list.sort()</td><td>对列表中的元素进行排序。</td></tr><tr><td>list.reverse()</td><td>倒排列表中的元素。</td></tr></tbody></table><h3 id="1-list-append-x-：将元素添加到列表末尾"><a href="#1-list-append-x-：将元素添加到列表末尾" class="headerlink" title="1. list.append(x)：将元素添加到列表末尾"></a>1. <code>list.append(x)</code>：将元素添加到列表末尾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>a.append(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h3 id="2-list-extend-L-：将另一个列表的所有元素添加到当前列表"><a href="#2-list-extend-L-：将另一个列表的所有元素添加到当前列表" class="headerlink" title="2. list.extend(L)：将另一个列表的所有元素添加到当前列表"></a>2. <code>list.extend(L)</code>：将另一个列表的所有元素添加到当前列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>a.extend(b)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><h3 id="3-list-insert-i-x-：在指定位置插入元素"><a href="#3-list-insert-i-x-：在指定位置插入元素" class="headerlink" title="3. list.insert(i, x)：在指定位置插入元素"></a>3. <code>list.insert(i, x)</code>：在指定位置插入元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>a.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;x&quot;</span>)  <span class="hljs-comment"># 在索引 1 的位置插入 &quot;x&quot;</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[1, &#x27;x&#x27;, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="4-list-remove-x-：删除第一个值为-x-的元素"><a href="#4-list-remove-x-：删除第一个值为-x-的元素" class="headerlink" title="4. list.remove(x)：删除第一个值为 x 的元素"></a>4. <code>list.remove(x)</code>：删除第一个值为 x 的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br>a.remove(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 删除第一个值为 2 的元素</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[1, 3, 2]</span><br></code></pre></td></tr></table></figure><h3 id="5-list-pop-i-：移除指定位置的元素并返回该元素"><a href="#5-list-pop-i-：移除指定位置的元素并返回该元素" class="headerlink" title="5. list.pop([i])：移除指定位置的元素并返回该元素"></a>5. <code>list.pop([i])</code>：移除指定位置的元素并返回该元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(a.pop(<span class="hljs-number">1</span>))  <span class="hljs-comment"># 移除索引为 1 的元素并返回，输出：2</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[1, 3]</span><br></code></pre></td></tr></table></figure><h3 id="6-list-clear-：清空列表"><a href="#6-list-clear-：清空列表" class="headerlink" title="6. list.clear()：清空列表"></a>6. <code>list.clear()</code>：清空列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>a.clear()<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[]</span><br></code></pre></td></tr></table></figure><h3 id="7-list-index-x-：返回第一个值为-x-的元素的索引"><a href="#7-list-index-x-：返回第一个值为-x-的元素的索引" class="headerlink" title="7. list.index(x)：返回第一个值为 x 的元素的索引"></a>7. <code>list.index(x)</code>：返回第一个值为 x 的元素的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(a.index(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 输出：1</span><br></code></pre></td></tr></table></figure><h3 id="8-list-count-x-：返回-x-在列表中出现的次数"><a href="#8-list-count-x-：返回-x-在列表中出现的次数" class="headerlink" title="8. list.count(x)：返回 x 在列表中出现的次数"></a>8. <code>list.count(x)</code>：返回 x 在列表中出现的次数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(a.count(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 输出：3</span><br></code></pre></td></tr></table></figure><h3 id="9-list-sort-：对列表中的元素进行排序"><a href="#9-list-sort-：对列表中的元素进行排序" class="headerlink" title="9. list.sort()：对列表中的元素进行排序"></a>9. <code>list.sort()</code>：对列表中的元素进行排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>]<br>a.sort()<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[1, 1, 2, 3, 4, 5, 9]</span><br></code></pre></td></tr></table></figure><h3 id="10-list-reverse-：反转列表中的元素"><a href="#10-list-reverse-：反转列表中的元素" class="headerlink" title="10. list.reverse()：反转列表中的元素"></a>10. <code>list.reverse()</code>：反转列表中的元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>a.reverse()<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 输出：[5, 4, 3, 2, 1]</span><br></code></pre></td></tr></table></figure><h2 id="将列表当作栈使用"><a href="#将列表当作栈使用" class="headerlink" title="将列表当作栈使用"></a>将列表当作栈使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个空栈</span><br>stack = []<br><br><span class="hljs-comment"># 添加元素到栈中</span><br>stack.append(<span class="hljs-string">&quot;A&quot;</span>)<br>stack.append(<span class="hljs-string">&quot;B&quot;</span>)<br>stack.append(<span class="hljs-string">&quot;C&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前栈的内容：&quot;</span>, stack)  <span class="hljs-comment"># 输出：[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><br><span class="hljs-comment"># 移除并返回栈顶元素</span><br>top_element = stack.pop()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移除的栈顶元素：&quot;</span>, top_element)  <span class="hljs-comment"># 输出：C</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移除后栈的内容：&quot;</span>, stack)  <span class="hljs-comment"># 输出：[&#x27;A&#x27;, &#x27;B&#x27;]</span><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#当前栈的内容： [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="hljs-comment">#移除的栈顶元素： C</span><br><span class="hljs-comment">#移除后栈的内容： [&#x27;A&#x27;, &#x27;B&#x27;]</span><br></code></pre></td></tr></table></figure><h2 id="将列表当作队列使用"><a href="#将列表当作队列使用" class="headerlink" title="将列表当作队列使用"></a>将列表当作队列使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个空队列</span><br>queue = []<br><br><span class="hljs-comment"># 添加元素到队列中</span><br>queue.append(<span class="hljs-string">&quot;A&quot;</span>)<br>queue.append(<span class="hljs-string">&quot;B&quot;</span>)<br>queue.append(<span class="hljs-string">&quot;C&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前队列的内容：&quot;</span>, queue)  <span class="hljs-comment"># 输出：[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><br><span class="hljs-comment"># 移除并返回队列头部的元素</span><br>front_element = queue.pop(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移除的队列头部元素：&quot;</span>, front_element)  <span class="hljs-comment"># 输出：A</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移除后队列的内容：&quot;</span>, queue)  <span class="hljs-comment"># 输出：[&#x27;B&#x27;, &#x27;C&#x27;]</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#当前队列的内容： [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="hljs-comment">#移除的队列头部元素： A</span><br><span class="hljs-comment">#移除后队列的内容： [&#x27;B&#x27;, &#x27;C&#x27;]</span><br><br></code></pre></td></tr></table></figure><h2 id="使用-collections-deque-实现队列："><a href="#使用-collections-deque-实现队列：" class="headerlink" title="使用 collections.deque 实现队列："></a>使用 <code>collections.deque</code> 实现队列：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><span class="hljs-comment"># 创建一个空队列</span><br>queue = deque()<br><br><span class="hljs-comment"># 添加元素到队列中</span><br>queue.append(<span class="hljs-string">&quot;A&quot;</span>)<br>queue.append(<span class="hljs-string">&quot;B&quot;</span>)<br>queue.append(<span class="hljs-string">&quot;C&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前队列的内容：&quot;</span>, <span class="hljs-built_in">list</span>(queue))  <span class="hljs-comment"># 输出：[&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><br><span class="hljs-comment"># 移除并返回队列头部的元素</span><br>front_element = queue.popleft()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移除的队列头部元素：&quot;</span>, front_element)  <span class="hljs-comment"># 输出：A</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;移除后队列的内容：&quot;</span>, <span class="hljs-built_in">list</span>(queue))  <span class="hljs-comment"># 输出：[&#x27;B&#x27;, &#x27;C&#x27;]</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#当前队列的内容： [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span><br><span class="hljs-comment">#移除的队列头部元素： A</span><br><span class="hljs-comment">#移除后队列的内容： [&#x27;B&#x27;, &#x27;C&#x27;]</span><br></code></pre></td></tr></table></figure><h1 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h1><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前：&quot;</span>, x)  <span class="hljs-comment"># 输出：10</span><br><br><span class="hljs-keyword">del</span> x  <span class="hljs-comment"># 删除变量 x</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后：&quot;</span>, x)<br><span class="hljs-keyword">except</span> NameError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误信息：&quot;</span>, e)  <span class="hljs-comment"># 输出：name &#x27;x&#x27; is not defined</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#删除前： 10</span><br><span class="hljs-comment">#错误信息： name &#x27;x&#x27; is not defined</span><br></code></pre></td></tr></table></figure><h2 id="删除列表中的元素"><a href="#删除列表中的元素" class="headerlink" title="删除列表中的元素"></a>删除列表中的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前：&quot;</span>, my_list)  <span class="hljs-comment"># 输出：[1, 2, 3, 4, 5]</span><br><br><span class="hljs-keyword">del</span> my_list[<span class="hljs-number">2</span>]  <span class="hljs-comment"># 删除索引为 2 的元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后：&quot;</span>, my_list)  <span class="hljs-comment"># 输出：[1, 2, 4, 5]</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#删除前： [1, 2, 3, 4, 5]</span><br><span class="hljs-comment">#删除后： [1, 2, 4, 5]</span><br></code></pre></td></tr></table></figure><h2 id="删除列表的切片"><a href="#删除列表的切片" class="headerlink" title="删除列表的切片"></a>删除列表的切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前：&quot;</span>, my_list)  <span class="hljs-comment"># 输出：[1, 2, 3, 4, 5, 6]</span><br><br><span class="hljs-keyword">del</span> my_list[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]  <span class="hljs-comment"># 删除索引从 2 到 4 的元素</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后：&quot;</span>, my_list)  <span class="hljs-comment"># 输出：[1, 2, 6]</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#删除前： [1, 2, 3, 4, 5, 6]</span><br><span class="hljs-comment">#删除后： [1, 2, 6]</span><br></code></pre></td></tr></table></figure><h2 id="删除字典中的键值对"><a href="#删除字典中的键值对" class="headerlink" title="删除字典中的键值对"></a>删除字典中的键值对</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">3</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前：&quot;</span>, my_dict)  <span class="hljs-comment"># 输出：&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span><br><br><span class="hljs-keyword">del</span> my_dict[<span class="hljs-string">&quot;b&quot;</span>]  <span class="hljs-comment"># 删除键 &quot;b&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后：&quot;</span>, my_dict)  <span class="hljs-comment"># 输出：&#123;&#x27;a&#x27;: 1, &#x27;c&#x27;: 3&#125;</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#删除前： &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span><br><span class="hljs-comment">#删除后： &#123;&#x27;a&#x27;: 1, &#x27;c&#x27;: 3&#125;</span><br></code></pre></td></tr></table></figure><h2 id="删除整个列表或字典"><a href="#删除整个列表或字典" class="headerlink" title="删除整个列表或字典"></a>删除整个列表或字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>my_dict = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前：&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表：&quot;</span>, my_list)  <span class="hljs-comment"># 输出：[1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字典：&quot;</span>, my_dict)  <span class="hljs-comment"># 输出：&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><br><span class="hljs-keyword">del</span> my_list  <span class="hljs-comment"># 删除整个列表</span><br><span class="hljs-keyword">del</span> my_dict  <span class="hljs-comment"># 删除整个字典</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表：&quot;</span>, my_list)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字典：&quot;</span>, my_dict)<br><span class="hljs-keyword">except</span> NameError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误信息：&quot;</span>, e)  <span class="hljs-comment"># 输出：name &#x27;my_list&#x27; is not defined</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#删除前：</span><br><span class="hljs-comment">#列表： [1, 2, 3]</span><br><span class="hljs-comment">#字典： &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><span class="hljs-comment">#错误信息： name &#x27;my_list&#x27; is not defined</span><br></code></pre></td></tr></table></figure><h2 id="删除模块或类的属性"><a href="#删除模块或类的属性" class="headerlink" title="删除模块或类的属性"></a>删除模块或类的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    attr1 = <span class="hljs-string">&quot;Hello&quot;</span><br>    attr2 = <span class="hljs-string">&quot;World&quot;</span><br><br>obj = MyClass()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除前：&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;attr1 =&quot;</span>, obj.attr1)  <span class="hljs-comment"># 输出：Hello</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;attr2 =&quot;</span>, obj.attr2)  <span class="hljs-comment"># 输出：World</span><br><br><span class="hljs-keyword">del</span> obj.attr1  <span class="hljs-comment"># 删除对象的属性 attr1</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后：&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;attr1 =&quot;</span>, obj.attr1)<br><span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误信息：&quot;</span>, e)  <span class="hljs-comment"># 输出：&#x27;MyClass&#x27; object has no attribute &#x27;attr1&#x27;</span><br><br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">#删除前：</span><br><span class="hljs-comment">#attr1 = Hello</span><br><span class="hljs-comment">#attr2 = World</span><br><span class="hljs-comment">#错误信息： &#x27;MyClass&#x27; object has no attribute &#x27;attr1&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="元组和序列"><a href="#元组和序列" class="headerlink" title="元组和序列"></a>元组和序列</h1><h2 id="元组的创建和基本操作"><a href="#元组的创建和基本操作" class="headerlink" title="元组的创建和基本操作"></a>元组的创建和基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建元组</span><br>t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>t2 = <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>  <span class="hljs-comment"># 不用括号也可以创建元组</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t1:&quot;</span>, t1)  <span class="hljs-comment"># 输出：(1, 2, 3, 4)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t2:&quot;</span>, t2)  <span class="hljs-comment"># 输出：(&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;)</span><br><br><span class="hljs-comment"># 元组的索引操作</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t1的第一个元素:&quot;</span>, t1[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 输出：1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t2的最后一个元素:&quot;</span>, t2[-<span class="hljs-number">1</span>])  <span class="hljs-comment"># 输出：cherry</span><br><br><span class="hljs-comment"># 元组的切片操作</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t1的切片 t1[1:3]:&quot;</span>, t1[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])  <span class="hljs-comment"># 输出：(2, 3)</span><br></code></pre></td></tr></table></figure><h2 id="元组的不可变性"><a href="#元组的不可变性" class="headerlink" title="元组的不可变性"></a>元组的不可变性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">try</span>:<br>    t[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>  <span class="hljs-comment"># 尝试修改元组的第一个元素</span><br><span class="hljs-keyword">except</span> TypeError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;错误信息:&quot;</span>, e)  <span class="hljs-comment"># 输出：&#x27;tuple&#x27; object does not support item assignment</span><br></code></pre></td></tr></table></figure><h2 id="元组的解包"><a href="#元组的解包" class="headerlink" title="元组的解包"></a>元组的解包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 元组解包</span><br>t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>a, b, c = t<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a =&quot;</span>, a, <span class="hljs-string">&quot;b =&quot;</span>, b, <span class="hljs-string">&quot;c =&quot;</span>, c)  <span class="hljs-comment"># 输出：a = 1 b = 2 c = 3</span><br><br><span class="hljs-comment"># 使用 * 来捕获剩余元素</span><br>t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>a, *b, c = t<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a =&quot;</span>, a, <span class="hljs-string">&quot;b =&quot;</span>, b, <span class="hljs-string">&quot;c =&quot;</span>, c)  <span class="hljs-comment"># 输出：a = 1 b = [2, 3, 4] c = 5</span><br></code></pre></td></tr></table></figure><h2 id="元组的常用方法"><a href="#元组的常用方法" class="headerlink" title="元组的常用方法"></a>元组的常用方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 统计元素出现的次数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元素 2 出现的次数:&quot;</span>, t.count(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 输出：3</span><br><br><span class="hljs-comment"># 获取元素的索引</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元素 3 的索引:&quot;</span>, t.index(<span class="hljs-number">3</span>))  <span class="hljs-comment"># 输出：2</span><br></code></pre></td></tr></table></figure><h2 id="序列的通用操作"><a href="#序列的通用操作" class="headerlink" title="序列的通用操作"></a>序列的通用操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串作为序列</span><br>s = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字符串 s:&quot;</span>, s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s[1]:&quot;</span>, s[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 输出：e</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s[1:4]:&quot;</span>, s[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 输出：ell</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;len(s):&quot;</span>, <span class="hljs-built_in">len</span>(s))  <span class="hljs-comment"># 输出：5</span><br><br><span class="hljs-comment"># 列表作为序列</span><br>lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n列表 lst:&quot;</span>, lst)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lst[2]:&quot;</span>, lst[<span class="hljs-number">2</span>])  <span class="hljs-comment"># 输出：30</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lst[1:4]:&quot;</span>, lst[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 输出：[20, 30, 40]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;len(lst):&quot;</span>, <span class="hljs-built_in">len</span>(lst))  <span class="hljs-comment"># 输出：5</span><br><br><span class="hljs-comment"># 元组作为序列</span><br>t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n元组 t:&quot;</span>, t)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t[2]:&quot;</span>, t[<span class="hljs-number">2</span>])  <span class="hljs-comment"># 输出：3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;t[1:4]:&quot;</span>, t[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])  <span class="hljs-comment"># 输出：(2, 3, 4)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;len(t):&quot;</span>, <span class="hljs-built_in">len</span>(t))  <span class="hljs-comment"># 输出：5</span><br></code></pre></td></tr></table></figure><h2 id="序列的成员检查"><a href="#序列的成员检查" class="headerlink" title="序列的成员检查"></a>序列的成员检查</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello&quot;</span><br>lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字符 &#x27;e&#x27; 是否在字符串 s 中:&quot;</span>, <span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-keyword">in</span> s)  <span class="hljs-comment"># 输出：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数字 25 是否在列表 lst 中:&quot;</span>, <span class="hljs-number">25</span> <span class="hljs-keyword">in</span> lst)  <span class="hljs-comment"># 输出：False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数字 2 是否在元组 t 中:&quot;</span>, <span class="hljs-number">2</span> <span class="hljs-keyword">in</span> t)  <span class="hljs-comment"># 输出：True</span><br></code></pre></td></tr></table></figure><h2 id="序列的链接和重复"><a href="#序列的链接和重复" class="headerlink" title="序列的链接和重复"></a>序列的链接和重复</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串连接和重复</span><br>s1 = <span class="hljs-string">&quot;hello&quot;</span><br>s2 = <span class="hljs-string">&quot;world&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字符串连接:&quot;</span>, s1 + <span class="hljs-string">&quot; &quot;</span> + s2)  <span class="hljs-comment"># 输出：hello world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字符串重复:&quot;</span>, s1 * <span class="hljs-number">3</span>)  <span class="hljs-comment"># 输出：hellohellohello</span><br><br><span class="hljs-comment"># 列表连接和重复</span><br>lst1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>lst2 = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表连接:&quot;</span>, lst1 + lst2)  <span class="hljs-comment"># 输出：[1, 2, 3, 4, 5, 6]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列表重复:&quot;</span>, lst1 * <span class="hljs-number">3</span>)  <span class="hljs-comment"># 输出：[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br><br><span class="hljs-comment"># 元组连接和重复</span><br>t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>t2 = (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元组连接:&quot;</span>, t1 + t2)  <span class="hljs-comment"># 输出：(1, 2, 3, 4)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;元组重复:&quot;</span>, t1 * <span class="hljs-number">3</span>)  <span class="hljs-comment"># 输出：(1, 2, 1, 2, 1, 2)</span><br></code></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用花括号创建集合</span><br>my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用花括号创建的集合:&quot;</span>, my_set)  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4&#125;</span><br><br><span class="hljs-comment"># 使用 set() 函数创建集合</span><br>another_set = <span class="hljs-built_in">set</span>([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用 set() 创建的集合:&quot;</span>, another_set)  <span class="hljs-comment"># 输出：&#123;3, 4, 5, 6&#125;</span><br><br><span class="hljs-comment"># 创建空集合</span><br>empty_set = <span class="hljs-built_in">set</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空集合:&quot;</span>, empty_set)  <span class="hljs-comment"># 输出：set()</span><br></code></pre></td></tr></table></figure><h2 id="集合的无序和唯一性"><a href="#集合的无序和唯一性" class="headerlink" title="集合的无序和唯一性"></a>集合的无序和唯一性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 集合中的元素自动去重</span><br>my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;去重后的集合:&quot;</span>, my_set)  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4&#125;</span><br><br><span class="hljs-comment"># 集合是无序的</span><br>another_set = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无序集合:&quot;</span>, another_set)  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4&#125;（顺序可能不同）</span><br></code></pre></td></tr></table></figure><h2 id="集合的基本操作"><a href="#集合的基本操作" class="headerlink" title="集合的基本操作"></a>集合的基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 添加元素</span><br>my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>my_set.add(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;添加元素后的集合:&quot;</span>, my_set)  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4&#125;</span><br><br><span class="hljs-comment"># 删除元素</span><br>my_set.remove(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 如果元素不存在，会抛出 KeyError</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除元素后的集合:&quot;</span>, my_set)  <span class="hljs-comment"># 输出：&#123;1, 3, 4&#125;</span><br><br><span class="hljs-comment"># 使用 discard() 删除元素（不会抛出错误）</span><br>my_set.discard(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 尝试删除不存在的元素，不会报错</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用 discard() 后的集合:&quot;</span>, my_set)  <span class="hljs-comment"># 输出：&#123;1, 3, 4&#125;</span><br><br><span class="hljs-comment"># 清空集合</span><br>my_set.clear()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;清空后的集合:&quot;</span>, my_set)  <span class="hljs-comment"># 输出：set()</span><br></code></pre></td></tr></table></figure><h2 id="集合的数学运算"><a href="#集合的数学运算" class="headerlink" title="集合的数学运算"></a>集合的数学运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建两个集合</span><br>set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>set2 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br><br><span class="hljs-comment"># 并集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;并集:&quot;</span>, set1.union(set2))  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;并集（使用 | 运算符）:&quot;</span>, set1 | set2)  <span class="hljs-comment"># 输出：&#123;1, 2, 3, 4, 5, 6&#125;</span><br><br><span class="hljs-comment"># 交集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;交集:&quot;</span>, set1.intersection(set2))  <span class="hljs-comment"># 输出：&#123;3, 4&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;交集（使用 &amp; 运算符）:&quot;</span>, set1 &amp; set2)  <span class="hljs-comment"># 输出：&#123;3, 4&#125;</span><br><br><span class="hljs-comment"># 差集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;差集 (set1 - set2):&quot;</span>, set1.difference(set2))  <span class="hljs-comment"># 输出：&#123;1, 2&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;差集（使用 - 运算符）:&quot;</span>, set1 - set2)  <span class="hljs-comment"># 输出：&#123;1, 2&#125;</span><br><br><span class="hljs-comment"># 对称差集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对称差集:&quot;</span>, set1.symmetric_difference(set2))  <span class="hljs-comment"># 输出：&#123;1, 2, 5, 6&#125;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对称差集（使用 ^ 运算符）:&quot;</span>, set1 ^ set2)  <span class="hljs-comment"># 输出：&#123;1, 2, 5, 6&#125;</span><br></code></pre></td></tr></table></figure><h2 id="集合的成员检查"><a href="#集合的成员检查" class="headerlink" title="集合的成员检查"></a>集合的成员检查</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-comment"># 检查元素是否存在</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2 是否在集合中:&quot;</span>, <span class="hljs-number">2</span> <span class="hljs-keyword">in</span> my_set)  <span class="hljs-comment"># 输出：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;5 是否在集合中:&quot;</span>, <span class="hljs-number">5</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> my_set)  <span class="hljs-comment"># 输出：True</span><br></code></pre></td></tr></table></figure><h2 id="集合的子集和超集判断"><a href="#集合的子集和超集判断" class="headerlink" title="集合的子集和超集判断"></a>集合的子集和超集判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>set3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-comment"># 判断子集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set2 是否是 set1 的子集:&quot;</span>, set2.issubset(set1))  <span class="hljs-comment"># 输出：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set1 是否是 set2 的子集:&quot;</span>, set1.issubset(set2))  <span class="hljs-comment"># 输出：False</span><br><br><span class="hljs-comment"># 判断超集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set3 是否是 set1 的超集:&quot;</span>, set3.issuperset(set1))  <span class="hljs-comment"># 输出：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;set1 是否是 set3 的超集:&quot;</span>, set1.issuperset(set3))  <span class="hljs-comment"># 输出：False</span><br></code></pre></td></tr></table></figure><h2 id="集合的不可变版本：frozenset"><a href="#集合的不可变版本：frozenset" class="headerlink" title="集合的不可变版本：frozenset"></a>集合的不可变版本：frozenset</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建 frozenset</span><br>my_frozenset = <span class="hljs-built_in">frozenset</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;frozenset:&quot;</span>, my_frozenset)  <span class="hljs-comment"># 输出：frozenset(&#123;1, 2, 3, 4&#125;)</span><br><br><span class="hljs-comment"># frozenset 支持集合运算</span><br>another_frozenset = <span class="hljs-built_in">frozenset</span>([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;frozenset 的并集:&quot;</span>, my_frozenset | another_frozenset)  <span class="hljs-comment"># 输出：frozenset(&#123;1, 2, 3, 4, 5, 6&#125;)</span><br></code></pre></td></tr></table></figure><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用花括号创建字典</span><br>my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用花括号创建的字典:&quot;</span>, my_dict)  <br><span class="hljs-comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 25, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span><br><br><span class="hljs-comment"># 使用 dict() 函数创建字典</span><br>another_dict = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&quot;Bob&quot;</span>, age=<span class="hljs-number">30</span>, city=<span class="hljs-string">&quot;Los Angeles&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用 dict() 创建的字典:&quot;</span>, another_dict)  <br><span class="hljs-comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 30, &#x27;city&#x27;: &#x27;Los Angeles&#x27;&#125;</span><br><br><span class="hljs-comment"># 从键值对列表创建字典</span><br>key_value_pairs = [(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Charlie&quot;</span>), (<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">35</span>), (<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;Chicago&quot;</span>)]<br>dict_from_pairs = <span class="hljs-built_in">dict</span>(key_value_pairs)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;从键值对列表创建的字典:&quot;</span>, dict_from_pairs)  <br><span class="hljs-comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Charlie&#x27;, &#x27;age&#x27;: 35, &#x27;city&#x27;: &#x27;Chicago&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><br><span class="hljs-comment"># 使用键访问值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;名字:&quot;</span>, my_dict[<span class="hljs-string">&quot;name&quot;</span>])  <span class="hljs-comment"># 输出：Alice</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;年龄:&quot;</span>, my_dict[<span class="hljs-string">&quot;age&quot;</span>])   <span class="hljs-comment"># 输出：25</span><br><br><span class="hljs-comment"># 使用 get() 方法访问值（避免 KeyError）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;城市:&quot;</span>, my_dict.get(<span class="hljs-string">&quot;city&quot;</span>))  <span class="hljs-comment"># 输出：New York</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;性别:&quot;</span>, my_dict.get(<span class="hljs-string">&quot;gender&quot;</span>, <span class="hljs-string">&quot;未知&quot;</span>))  <span class="hljs-comment"># 键不存在时返回默认值 &quot;未知&quot;</span><br></code></pre></td></tr></table></figure><h2 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><br><span class="hljs-comment"># 修改键值对</span><br>my_dict[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">26</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;修改后的字典:&quot;</span>, my_dict)  <span class="hljs-comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 26, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span><br><br><span class="hljs-comment"># 添加新的键值对</span><br>my_dict[<span class="hljs-string">&quot;gender&quot;</span>] = <span class="hljs-string">&quot;Female&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;添加键值对后的字典:&quot;</span>, my_dict)  <br><span class="hljs-comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 26, &#x27;city&#x27;: &#x27;New York&#x27;, &#x27;gender&#x27;: &#x27;Female&#x27;&#125;</span><br><br><span class="hljs-comment"># 删除键值对</span><br><span class="hljs-keyword">del</span> my_dict[<span class="hljs-string">&quot;city&quot;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除键值对后的字典:&quot;</span>, my_dict)  <br><span class="hljs-comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 26, &#x27;gender&#x27;: &#x27;Female&#x27;&#125;</span><br><br><span class="hljs-comment"># 使用 pop() 删除并返回值</span><br>age = my_dict.pop(<span class="hljs-string">&quot;age&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除并返回的值:&quot;</span>, age)  <span class="hljs-comment"># 输出：26</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除后的字典:&quot;</span>, my_dict)  <span class="hljs-comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;gender&#x27;: &#x27;Female&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><br><span class="hljs-comment"># 遍历键</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;遍历键:&quot;</span>)<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> my_dict.keys():<br>    <span class="hljs-built_in">print</span>(key)  <span class="hljs-comment"># 输出：name, age, city</span><br><br><span class="hljs-comment"># 遍历值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n遍历值:&quot;</span>)<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> my_dict.values():<br>    <span class="hljs-built_in">print</span>(value)  <span class="hljs-comment"># 输出：Alice, 26, New York</span><br><br><span class="hljs-comment"># 遍历键值对</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n遍历键值对:&quot;</span>)<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)  <br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># name: Alice</span><br><span class="hljs-comment"># age: 26</span><br><span class="hljs-comment"># city: New York</span><br></code></pre></td></tr></table></figure><h2 id="字典的常用方法"><a href="#字典的常用方法" class="headerlink" title="字典的常用方法"></a>字典的常用方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><br><span class="hljs-comment"># 获取字典的长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字典的长度:&quot;</span>, <span class="hljs-built_in">len</span>(my_dict))  <span class="hljs-comment"># 输出：3</span><br><br><span class="hljs-comment"># 检查键是否存在</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;键 &#x27;age&#x27; 是否存在:&quot;</span>, <span class="hljs-string">&quot;age&quot;</span> <span class="hljs-keyword">in</span> my_dict)  <span class="hljs-comment"># 输出：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;键 &#x27;gender&#x27; 是否存在:&quot;</span>, <span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-keyword">in</span> my_dict)  <span class="hljs-comment"># 输出：False</span><br><br><span class="hljs-comment"># 清空字典</span><br>my_dict.clear()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;清空后的字典:&quot;</span>, my_dict)  <span class="hljs-comment"># 输出：&#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="字典的嵌套"><a href="#字典的嵌套" class="headerlink" title="字典的嵌套"></a>字典的嵌套</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">nested_dict = &#123;<br>    <span class="hljs-string">&quot;Alice&quot;</span>: &#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;,<br>    <span class="hljs-string">&quot;Bob&quot;</span>: &#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;Los Angeles&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-comment"># 访问嵌套字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Alice 的年龄:&quot;</span>, nested_dict[<span class="hljs-string">&quot;Alice&quot;</span>][<span class="hljs-string">&quot;age&quot;</span>])  <span class="hljs-comment"># 输出：26</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Bob 的城市:&quot;</span>, nested_dict[<span class="hljs-string">&quot;Bob&quot;</span>][<span class="hljs-string">&quot;city&quot;</span>])  <span class="hljs-comment"># 输出：Los Angeles</span><br><br><span class="hljs-comment"># 修改嵌套字典</span><br>nested_dict[<span class="hljs-string">&quot;Alice&quot;</span>][<span class="hljs-string">&quot;city&quot;</span>] = <span class="hljs-string">&quot;Chicago&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;修改后的嵌套字典:&quot;</span>, nested_dict)  <br><span class="hljs-comment"># 输出：</span><br><span class="hljs-comment"># &#123;&#x27;Alice&#x27;: &#123;&#x27;age&#x27;: 26, &#x27;city&#x27;: &#x27;Chicago&#x27;&#125;, &#x27;Bob&#x27;: &#123;&#x27;age&#x27;: 30, &#x27;city&#x27;: &#x27;Los Angeles&#x27;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="字典的推导式"><a href="#字典的推导式" class="headerlink" title="字典的推导式"></a>字典的推导式</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 使用字典推导式创建字典</span><br>squares = &#123;x: x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字典推导式结果:&quot;</span>, squares)  <span class="hljs-comment"># 输出：&#123;1: 1, 2: 4, 3: 9, 4: 16, 5: 25&#125;</span><br><br><span class="hljs-comment"># 条件字典推导式</span><br>even_squares = &#123;x: x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;条件字典推导式结果:&quot;</span>, even_squares)  <span class="hljs-comment"># 输出：&#123;2: 4, 4: 16&#125;</span><br></code></pre></td></tr></table></figure><h2 id="字典的合并"><a href="#字典的合并" class="headerlink" title="字典的合并"></a>字典的合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2</span>&#125;<br>dict2 = &#123;<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">4</span>&#125;<br><br><span class="hljs-comment"># 使用 update() 合并字典</span><br>dict1.update(dict2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用 update() 合并后的字典:&quot;</span>, dict1)  <span class="hljs-comment"># 输出：&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 3, &#x27;c&#x27;: 4&#125;</span><br><br><span class="hljs-comment"># 使用 ** 解包操作符合并字典</span><br>dict3 = &#123;**dict1, **dict2&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;使用 ** 解包操作符合并后的字典:&quot;</span>, dict3)  <span class="hljs-comment"># 输出：&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 3, &#x27;c&#x27;: 4&#125;</span><br><br></code></pre></td></tr></table></figure><h1 id="遍历技巧"><a href="#遍历技巧" class="headerlink" title="遍历技巧"></a>遍历技巧</h1><h2 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h2><h3 id="基本遍历"><a href="#基本遍历" class="headerlink" title="基本遍历"></a>基本遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(fruit)<br></code></pre></td></tr></table></figure><h3 id="使用enumerate-获取索引和值"><a href="#使用enumerate-获取索引和值" class="headerlink" title="使用enumerate()获取索引和值"></a>使用<code>enumerate()</code>获取索引和值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br><span class="hljs-keyword">for</span> index, fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Index: <span class="hljs-subst">&#123;index&#125;</span>, Fruit: <span class="hljs-subst">&#123;fruit&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="反向遍历"><a href="#反向遍历" class="headerlink" title="反向遍历"></a>反向遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(fruits):<br>    <span class="hljs-built_in">print</span>(fruit)<br></code></pre></td></tr></table></figure><h2 id="遍历字典-1"><a href="#遍历字典-1" class="headerlink" title="遍历字典"></a>遍历字典</h2><h3 id="遍历键"><a href="#遍历键" class="headerlink" title="遍历键"></a>遍历键</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> my_dict:<br>    <span class="hljs-built_in">print</span>(key)  <span class="hljs-comment"># 输出：name, age, city</span><br></code></pre></td></tr></table></figure><h3 id="遍历值"><a href="#遍历值" class="headerlink" title="遍历值"></a>遍历值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> my_dict.values():<br>    <span class="hljs-built_in">print</span>(value)  <span class="hljs-comment"># 输出：Alice, 25, New York</span><br></code></pre></td></tr></table></figure><h3 id="遍历键值对"><a href="#遍历键值对" class="headerlink" title="遍历键值对"></a>遍历键值对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="遍历集合"><a href="#遍历集合" class="headerlink" title="遍历集合"></a>遍历集合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> my_set:<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><h2 id="遍历字符串"><a href="#遍历字符串" class="headerlink" title="遍历字符串"></a>遍历字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span>(char)<br></code></pre></td></tr></table></figure><h2 id="遍历多个序列（zip（）"><a href="#遍历多个序列（zip（）" class="headerlink" title="遍历多个序列（zip（）)"></a>遍历多个序列（<code>zip（）</code>)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">names = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Charlie&quot;</span>]<br>ages = [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>]<br><span class="hljs-keyword">for</span> name, age <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(names, ages):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> is <span class="hljs-subst">&#123;age&#125;</span> years old&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="处理长度不一致的情况："><a href="#处理长度不一致的情况：" class="headerlink" title="处理长度不一致的情况："></a>处理长度不一致的情况：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> zip_longest<br><br>names = [<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Charlie&quot;</span>]<br>ages = [<span class="hljs-number">25</span>, <span class="hljs-number">30</span>]<br><span class="hljs-keyword">for</span> name, age <span class="hljs-keyword">in</span> zip_longest(names, ages, fillvalue=<span class="hljs-string">&quot;Unknown&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span> is <span class="hljs-subst">&#123;age&#125;</span> years old&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="遍历文件"><a href="#遍历文件" class="headerlink" title="遍历文件"></a>遍历文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;example.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        <span class="hljs-built_in">print</span>(line.strip())  <span class="hljs-comment"># 使用 strip() 去掉换行符</span><br></code></pre></td></tr></table></figure><h2 id="遍历嵌套数据结构"><a href="#遍历嵌套数据结构" class="headerlink" title="遍历嵌套数据结构"></a>遍历嵌套数据结构</h2><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">matrix = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]]<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> matrix:<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> row:<br>        <span class="hljs-built_in">print</span>(item, end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-built_in">print</span>()  <span class="hljs-comment"># 换行</span><br></code></pre></td></tr></table></figure><h3 id="嵌套字典"><a href="#嵌套字典" class="headerlink" title="嵌套字典"></a>嵌套字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">nested_dict = &#123;<br>    <span class="hljs-string">&quot;Alice&quot;</span>: &#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;,<br>    <span class="hljs-string">&quot;Bob&quot;</span>: &#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;Los Angeles&quot;</span>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> name, info <span class="hljs-keyword">in</span> nested_dict.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>:&quot;</span>)<br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> info.items():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;  <span class="hljs-subst">&#123;key&#125;</span>: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="使用iter-和next-手动遍历"><a href="#使用iter-和next-手动遍历" class="headerlink" title="使用iter()和next()手动遍历"></a>使用<code>iter()</code>和<code>next()</code>手动遍历</h2><p><code>iter()</code> 返回一个迭代器，<code>next()</code> 用于获取下一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>iterator = <span class="hljs-built_in">iter</span>(my_list)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        item = <span class="hljs-built_in">next</span>(iterator)<br>        <span class="hljs-built_in">print</span>(item)<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="遍历时修改数据结构"><a href="#遍历时修改数据结构" class="headerlink" title="遍历时修改数据结构"></a>遍历时修改数据结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用拷贝</span><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> my_list[:]:  <span class="hljs-comment"># 遍历拷贝</span><br>    <span class="hljs-keyword">if</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        my_list.remove(item)<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出：[1, 3]</span><br><br><span class="hljs-comment"># 使用索引</span><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(my_list) - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):  <span class="hljs-comment"># 从后向前遍历</span><br>    <span class="hljs-keyword">if</span> my_list[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">del</span> my_list[i]<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出：[1, 3]</span><br></code></pre></td></tr></table></figure><h2 id="遍历时过滤和映射数据"><a href="#遍历时过滤和映射数据" class="headerlink" title="遍历时过滤和映射数据"></a>遍历时过滤和映射数据</h2><h3 id="使用列表推导式过滤："><a href="#使用列表推导式过滤：" class="headerlink" title="使用列表推导式过滤："></a>使用列表推导式过滤：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>even_numbers = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> numbers <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(even_numbers)  <span class="hljs-comment"># 输出：[2, 4]</span><br></code></pre></td></tr></table></figure><h3 id="使用map-和filter"><a href="#使用map-和filter" class="headerlink" title="使用map()和filter():"></a>使用<code>map()</code>和<code>filter()</code>:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迭代器与生成器</title>
    <link href="/2025/02/05/%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2025/02/05/%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>1.迭代器是一个可以记住遍历的位置的对象。</p><p>2.迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>3.迭代器有两个基本的方法：<strong>iter()</strong> 和 **next()**。</p><h2 id="iter"><a href="#iter" class="headerlink" title="iter():"></a>iter():</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))   <span class="hljs-comment"># 输出迭代器的下一个元素</span><br><span class="hljs-comment">#1</span><br><span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))<br><span class="hljs-comment">#2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> it:<br>    <span class="hljs-built_in">print</span> (x, end=<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-comment">#1 2 3 4</span><br></code></pre></td></tr></table></figure><h2 id="next"><a href="#next" class="headerlink" title="next():"></a>next():</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys         <span class="hljs-comment"># 引入 sys 模块</span><br> <br><span class="hljs-built_in">list</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>it = <span class="hljs-built_in">iter</span>(<span class="hljs-built_in">list</span>)    <span class="hljs-comment"># 创建迭代器对象</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(it))<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br><span class="hljs-comment">#1</span><br><span class="hljs-comment">#2</span><br><span class="hljs-comment">#3</span><br><span class="hljs-comment">#4</span><br></code></pre></td></tr></table></figure><h2 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h2><p><strong>iter</strong>() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong>() 方法并通过 StopIteration 异常标识迭代的完成。</p><p><strong>next</strong>() 方法会返回下一个迭代器对象。</p><h3 id="创建一个返回数字的迭代器，初始值为-1，逐步递增-1："><a href="#创建一个返回数字的迭代器，初始值为-1，逐步递增-1：" class="headerlink" title="创建一个返回数字的迭代器，初始值为 1，逐步递增 1："></a>创建一个返回数字的迭代器，初始值为 1，逐步递增 1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNumbers</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-variable language_">self</span>.a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br> <br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>    x = <span class="hljs-variable language_">self</span>.a<br>    <span class="hljs-variable language_">self</span>.a += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> x<br> <br>myclass = MyNumbers()<br>myiter = <span class="hljs-built_in">iter</span>(myclass)<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiter))<br><span class="hljs-comment">#1</span><br><span class="hljs-comment">#2</span><br><span class="hljs-comment">#3</span><br><span class="hljs-comment">#4</span><br><span class="hljs-comment">#5</span><br></code></pre></td></tr></table></figure><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>使用了 <strong>yield</strong> 的函数被称为生成器。</p><p><strong>yield</strong> 是一个关键字，用于定义生成器函数，生成器函数是一种特殊的函数，可以在迭代过程中逐步产生值，而不是一次性返回所有结果。</p><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p><p>当在生成器函数中使用 <strong>yield</strong> 语句时，函数的执行将会暂停，并将 <strong>yield</strong> 后面的表达式作为当前迭代的值返回。</p><p>然后，每次调用生成器的 <strong>next()</strong> 方法或使用 <strong>for</strong> 循环进行迭代时，函数会从上次暂停的地方继续执行，直到再次遇到 <strong>yield</strong> 语句。这样，生成器函数可以逐步产生值，而不需要一次性计算并返回所有结果。</p><p>调用一个生成器函数，返回的是一个迭代器对象。</p><h2 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countdown</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">yield</span> n<br>        n -= <span class="hljs-number">1</span><br> <br><span class="hljs-comment"># 创建生成器对象</span><br>generator = countdown(<span class="hljs-number">5</span>)<br> <br><span class="hljs-comment"># 通过迭代生成器获取值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: 5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: 4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(generator))  <span class="hljs-comment"># 输出: 3</span><br> <br><span class="hljs-comment"># 使用 for 循环迭代生成器</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> generator:<br>    <span class="hljs-built_in">print</span>(value)  <span class="hljs-comment"># 输出: 2 1</span><br></code></pre></td></tr></table></figure><h2 id="用-yield-实现斐波那契数列"><a href="#用-yield-实现斐波那契数列" class="headerlink" title="用 yield 实现斐波那契数列:"></a>用 yield 实现斐波那契数列:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> sys<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>): <span class="hljs-comment"># 生成器函数 - 斐波那契</span><br>    a, b, counter = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> (counter &gt; n): <br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b<br>        counter += <span class="hljs-number">1</span><br>f = fibonacci(<span class="hljs-number">10</span>) <span class="hljs-comment"># f 是一个迭代器，由生成器返回生成</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(f), end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> sys<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params">n</span>): <span class="hljs-comment"># 生成器函数 - 斐波那契</span><br>    a, b, counter = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> (counter &gt; n): <br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">yield</span> a<br>        a, b = b, a + b<br>        counter += <span class="hljs-number">1</span><br>f = fibonacci(<span class="hljs-number">10</span>) <span class="hljs-comment"># f 是一个迭代器，由生成器返回生成</span><br> <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">next</span>(f), end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">except</span> StopIteration:<br>        sys.exit()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
